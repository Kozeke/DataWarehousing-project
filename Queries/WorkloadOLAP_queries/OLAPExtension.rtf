{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 INSTRUCTIONS:\
\
You can copy the queries, according to the request in the assignment of the project, one by one in a query tool's window of PostgresSQL after the creation of all the tables and look the results.\
\
                            				QUERY ASSIGNEMENT\
\
1) Select team, year, sport, count(medal) as nbr_medals\
FROM\
"LogicalSchema_Project_DW".event_dt join \
(\
	select * from\
	"LogicalSchema_Project_DW".olympic_events_ft \
	join "LogicalSchema_Project_DW".athlete_dt on \
	"LogicalSchema_Project_DW".olympic_events_ft.id_athlete = "LogicalSchema_Project_DW".athlete_dt.id_athlete \
	where medal != 'NA'\
) as t1 on t1.id_event = "LogicalSchema_Project_DW".event_dt.id_event\
Group by Rollup(team, year, sport)\
\
2) Select team, count(medal) over (PARTITION BY team)\
from\
	"LogicalSchema_Project_DW".olympic_events_ft2 \
	join "LogicalSchema_Project_DW".athlete_dt on \
	"LogicalSchema_Project_DW".olympic_events_ft2.id_athlete = "LogicalSchema_Project_DW".athlete_dt.id_athlete \
	where (medal != 'NA' and Team= 'Italy') or (medal != 'NA' and Team= 'Germany')\
\
3.1) Select team, nbr_medal, RANK() over (PARTITION BY team ORDER BY nbr_medal desc ) as ranking \
from "LogicalSchema_Project_DW".nation_dt join \
(\
	select * from\
	"LogicalSchema_Project_DW".olympic_events_ft2 \
	join "LogicalSchema_Project_DW".athlete_dt on \
	"LogicalSchema_Project_DW".olympic_events_ft2.id_athlete = "LogicalSchema_Project_DW".athlete_dt.id_athlete \
	where (medal != 'NA' and Team= 'Italy') or (medal != 'NA' and Team= 'Germany') or (medal != 'NA' and Team= 'France')\
)as t1 on t1.code = "LogicalSchema_Project_DW".nation_dt.code\
\
\
\
3.2) Select team, year, count(medal) as nbr_medal, RANK() over (PARTITION BY team ORDER BY count(medal) desc ) as ranking \
FROM\
	"LogicalSchema_Project_DW".olympic_events_ft2 \
	join "LogicalSchema_Project_DW".athlete_dt on \
	"LogicalSchema_Project_DW".olympic_events_ft2.id_athlete = "LogicalSchema_Project_DW".athlete_dt.id_athlete \
	where (medal != 'NA' and Team= 'Italy') or (medal != 'NA' and Team= 'Germany') or (medal != 'NA' and Team= 'France')\
Group by (team,year)\
\
4) Select team, year, count(medal) over ( PARTITION BY team ORDER BY year desc ROWS UNBOUNDED PRECEDING ) as cumulCount\
FROM\
	"LogicalSchema_Project_DW".olympic_events_ft2 \
	join "LogicalSchema_Project_DW".athlete_dt on \
	"LogicalSchema_Project_DW".olympic_events_ft2.id_athlete = "LogicalSchema_Project_DW".athlete_dt.id_athlete \
	where (medal != 'NA' and Team= 'Italy') or (medal != 'NA' and Team= 'Germany') or (medal != 'NA' and Team= 'France')\
\
5)  Select team, year, avg(count(medal)) over ( PARTITION BY team ORDER BY year desc ROWS 2 PRECEDING ) as avg_medal\
FROM\
	"LogicalSchema_Project_DW".olympic_events_ft2 \
	join "LogicalSchema_Project_DW".athlete_dt on \
	"LogicalSchema_Project_DW".olympic_events_ft2.id_athlete = "LogicalSchema_Project_DW".athlete_dt.id_athlete \
	where (medal != 'NA' and Team= 'Italy') or (medal != 'NA' and Team= 'Germany') or (medal != 'NA' and Team= 'France')\
	group by(team, year)\
\
}